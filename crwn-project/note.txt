yarn add sass
what is the differenec between sass and css?
Sass (short for Syntactically Awesome Style Sheets) and CSS (Cascading Style Sheets) are both used for styling web pages,
but there are some key differences between the two.

Syntax: The syntax of Sass is different from CSS.
Sass uses indentation to define nested selectors,whereas CSS uses curly braces.
Sass also has features such as variables, functions, and mixins, which allow for more dynamic and reusable styles.

Compilation: Sass needs to be compiled into CSS before it can be used on a web page.
This means that Sass files need to be processed by a compiler before they can be used in a web project,
whereas CSS can be used directly.

Modularity: Sass allows for more modular code through the use of partials,
which are separate Sass files that can be imported into other files.
This makes it easier to organize and maintain large projects.

Reusability: Sass offers more reusability than CSS through the use of mixins and functions.
Mixins allow for the reuse of styles across multiple selectors,
while functions can be used to calculate values dynamically.

Overall, Sass is a more powerful and flexible styling language than CSS, 
but it requires more setup and knowledge to use effectively.
CSS, on the other hand, is simpler and easier to use, but it can be limiting for complex projects.


import ReactComponent as CrwnLogo:
yarn add vite-plugin-svgr + fix vite config
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import svgr from 'vite-plugin-svgr' 

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(), 
    svgr({ 
      svgrOptions: {
        // svgr options
      },
    }),
  ], 
})

http://localhost:5173/sign-in

Firebase Database => Rules => 
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if true;
    }
  }
}


difference between const user and const {user}
const user = 'John';
user = 'Jane'; // This will cause an error because 'user' is a constant and cannot be reassigned.
---------------------------------------------------------------------------------------------------------------------------------------------------------
const userObj = { user: 'John', age: 30 };
const { user } = userObj;
console.log(user); // Output: 'John'
In summary, const user declares a constant variable,
while const {user} uses object destructuring to extract the user property from an object
and assign it to a variable named user.


-----------------------------------------------------------------------------------------------------------------------------------------------------------
What is the error in this Code? (ChatGPT)

const SignIn = () => {
  
  useEffect(async () => {
    const response = await getRedirectResult(auth);
    console.log(response);
  }, []);}

The error in the provided code is related to the usage of the async keyword with the useEffect hook.

The useEffect hook expects the callback function to either be synchronous or return a cleanup function.
It doesn't directly support an async callback function.
Therefore, using async directly in the useEffect callback can lead to unexpected behavior or errors.

To handle asynchronous operations inside the useEffect hook,
you can define a separate async function and then call it within the effect.

Solution: 
const SignIn = () => {
  useEffect(() => {
    const fetchData = async () => {
      const response = await getRedirectResult(auth);
      console.log(response);
    };

    fetchData();
  }, []);
};
-------------------------------------------------------------------------------------------------------------
EXPLAIN THIS CODE:
  setFormFields({ ...formFields, [name]: value });
  
...formFields: This syntax is the spread operator in JavaScript, which is used to create a new object or array by copying the properties or elements from an existing object or array.
In this case, it creates a shallow copy of the formFields object.

[name]: value: This is object property shorthand notation introduced in ES6.
 It creates a new property in the object with the name specified by the name variable and assigns the value of the value variable to it.
 The square brackets [] around name indicate that the property name is determined dynamically based on the value of the name variable.


 a Component re-render whenever its states updates or its props change

 console.log("hit") in sign-up component : -we have two components sign-in and sign-up
                                           -we use Context just in sign-in component
                                           -what will re-render is sign-in only ; sign-up will not re-render because we didn't import useContext in it. 

In Firebase, the onAuthStateChanged method is used to monitor the authentication state of a user. It is typically used in client-side JavaScript code when working with Firebase Authentication.

The onAuthStateChanged method is provided by the Firebase Authentication SDK and allows you to register a callback function that will be called whenever the authentication state changes.
The authentication state can change when a user logs in, logs out, or their authentication token expires.

* In lesson 11 we uncomment setCurrentUser and currentUser from sign-in and sign-up components to unmount them when using context  and instead use onAuthStateChangedListener function to monitor user while sign-in sign-out and authenticaction of it

What is Transactions?
In the context of databases, a transaction is a logical unit of work that consists of one or more database operations.
It represents a sequence of actions that need to be executed together as an atomic operation.
A transaction ensures that either all the operations within it are completed successfully or none of them are applied, maintaining data integrity.

Example of Transactions =>bank : Ali :1000
                                 Sara:1000
Each of Ali and Sara has 1000 in their bank account 
if ali transer 100 to sara =>Logic : -Ali: 900 (1000-100) 
                                     -Sara:1100 (1000+100)
Both steps should be completed in order to say that a successfull transaction is done 
STEPS: 1-Begin the transaction.
       2-Read the current balance of Account A.
       3-Read the current balance of Account B.
       4-Subtract the transfer amount from Account A's balance.
       5-Add the transfer amount to Account B's balance.
       6-Write the updated balance of Account A.
       7-Write the updated balance of Account B.
       8-Commit the transaction.

What are Queries in DBMS?
In the context of databases, a query refers to a request or command sent to a database management system (DBMS) to retrieve or manipulate data.
It is a specific instruction given to the DBMS to perform an action on the data stored in the database.

Queries are used to extract information from a database based on specified conditions and criteria.
They allow you to search, filter, sort, and aggregate data to retrieve the desired results.
Queries are typically written using a structured query language (SQL) or other query languages specific to the DBMS being used.                                       

what is the differene between async function and promise(try,catch,then) ?
async functions internally use promises to handle the asynchronous operations and simplify the syntax for writing asynchronous code.

In the previous lesson we learned about Objects (Hash Table data structure) being better for searching for items than Array. This is a common computing optimization when talking about data structures. If you want to learn more about why this is, this is a great resource for you to use:
https://www.kirupa.com/html5/hashtables_vs_arrays.htm